[{"problem_name":"fizzbuzz", "editortext":"function fizzbuzz(num){};",
    "answer":"try { const arr = fizzbuzz(31); if (arr[0] === 1 && arr[2] === 'fizz' && arr[9] === 'buzz') { success(); } else { fail(); } } catch (err) { fail(); }",
 "difficulty":"easy", "problem_question":"Write a function that returns an array containing the numbers 1 to NUM. Put 'fizz' in place of numbers divisible by 3 but not by 5, 'buzz' in place of numbers divisible by 5 but not by 3, and 'fizzbuzz' in place of numbers divisible by both 3 and 5. fizzbuzz(16); -> [1, 2, 'fizz', 4, 'buzz', 'fizz', 7, 8, 'fizz', 'buzz', 11, 'fizz', 13, 14, 'fizzbuzz', 16]"}, 
 {"problem_name":"balancedParens", "editortext":"function balancedParens(string){};", "answer":"`try { if (balancedParens('()') === true && balancedParens('((()))') === true && balancedParens(')(') === false && balancedParens('()))') === false && balancedParens('[]{}()') === true && balancedParens('{([{}])}') === true && balancedParens('[{](})') === false && balancedParens(' const coolFunc = () => { anotherCoolFunc(); }') === true && balancedParens(' const yungHash = { a_key: { another_key: a_sicc_value } ;') === false) { success(); } else { fail(); } } catch (err) { fail(); }`;", "difficulty":"easy", "problem_question":"write a function that takes a string of text and returns true if the parentheses are balanced and false otherwise. Example: balancedParens('()');  // false balancedParens('()'); // true balancedParens('()');  // false balancedParens('()');  // true Step 2: make your solution work for all types of brackets Example: balancedParens('[]{}()'); // true balancedParens('[({})]');   // true balancedParens('[({})]'); // false Step 3: ignore non-bracket characters balancedParens(' const wow = { yo: thisIsAwesome() }'); // true balancedParens(' const newton = () => { telescopes.areSicc(); '); // false"},
 {"problem_name":"binToDec", "editortext":"function bunToDec(string){}",
 "answer":"try { if (binToDec('101') === 5 && binToDec('11111100100') === 2020 && binToDec('0000000010101') === 21) success(); else fail(); } catch (err) { fail();",
"difficulty":"easy", "problem_question":"Given a string that represents a Binary Number, write a function that converts this string into a decimal number. DO NOT use the native parseInt() method.\n\nFor example:\n\nbinToDec('0')   -> 0\nbinToDec('11')  -> 3\nbinToDec('100') -> 4\nbinToDec('101') -> 5\nbinToDec('0101') -> 5"}]